// Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @return if($index,
          str-slice($string, 1, $index - 1) + $replace +
        str-replace(str-slice($string, $index +
        str-length($search)), $search, $replace),
          $string);
}

// Encode svg function by http://codepen.io/jakob-e/pen/doMoML
@function svg-encode($svg) {
  // Chunk up string in order to avoid "stack level too deep" error
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    // Encode
    $chunk: str-replace($chunk, '"', '\'');
    $chunk: str-replace($chunk, '%', '%25');
    $chunk: str-replace($chunk, '#', '%23');
    $chunk: str-replace($chunk, '{', '%7B');
    $chunk: str-replace($chunk, '}', '%7D');
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');

    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return "data:image/svg+xml,#{$encoded}";
}

@function checkmark($color) {
  $start: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1 1">';
  $content: '<path style="fill:#{$color}" d="M 0.04038059,0.6267767 0.14644661,0.52071068 0.42928932,0.80355339 0.3232233,0.90961941 z M 0.21715729,0.80355339 0.85355339,0.16715729 0.95961941,0.2732233 0.3232233,0.90961941 z"></path>';
  $end: '</svg>';

  @return svg-encode("#{$start}#{$content}#{$end}");
}

@function indeterminate($color) {
  $start: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1 1">';
  $content: '<rect style="fill:#{$color}" width="0.7" height="0.2" x=".15" y=".4"></rect>';
  $end: '</svg>';

  @return svg-encode("#{$start}#{$content}#{$end}");
}

@function arrow($color, $is_down: true) {
  $start: '<svg width="12" height="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">';
  $content: if($is_down, '<path style="fill:#{$color}" d="M12 24l-8-9h6v-15h4v15h6z"/>', '<path style="fill:#{$color}" d="M12 0l8 9h-6v15h-4v-15h-6z"/>');
  $end: '</svg>';

  @return svg-encode("#{$start}#{$content}#{$end}");
}

@function chevron($color, $is_down: true) {
  $start: '<svg width="12" height="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">';
  $content: if($is_down, '<path style="fill:#{$color}" d="M0 7.33l2.829-2.83 9.175 9.339 9.167-9.339 2.829 2.83-11.996 12.17z"/>',
          '<path style="fill:#{$color}" d="M0 16.67l2.829 2.83 9.175-9.339 9.167 9.339 2.829-2.83-11.996-12.17z"/>');
  $end: '</svg>';

  @return svg-encode("#{$start}#{$content}#{$end}");
}

@function chevron_vertical($color, $is_right: true) {
  $start: '<svg width="12" height="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">';
  $content: if($is_right, '<path style="fill:#{$color}" d="M5 3l3.057-3 11.943 12-11.943 12-3.057-3 9-9z"/>',
          '<path style="fill:#{$color}" d="M16.67 0l2.83 2.829-9.339 9.175 9.339 9.167-2.83 2.829-12.17-11.996z"/>');
  $end: '</svg>';

  @return svg-encode("#{$start}#{$content}#{$end}");
}

@mixin bulma_box_style() {
  background-color: #fff;
  border-radius: 6px;
  box-shadow: 0 2px 3px rgba(10, 10, 10, .1), 0 0 0 1px rgba(10, 10, 10, .1);
  color: #4a4a4a;
  display: block;
  padding: 1.25rem;
}